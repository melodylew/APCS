ButterFingers: Melody Lew, Corina Chen, Fang Chen
APCS pd06
L06 -- Read/Review/Expand
2022-02-11f
time spent: 5.0 hrs

ACTIVITY 1: Introduction (Reviews and Sentiment Value)

1a. public static double sentimentVal( String word )
1b. sentimentVal() requires a String parameter. If you pass a different type of
parameter, there will be a compile error stating that the types are incompatible.
1c. The method returns a double.

2.
Method Call                     || Return Value
===============================================================
sentimentVal("hello");             0.75
sentimentVal("awesome");           0.92
sentimentVal("peers");             0.5

3a. This statement will compile because "warm" is a single String and
sentimentVal() takes in single String parameters.
3b. This statement will not compile because 0.5 is a double and not a String type.
3c. This statement will not compile because "good" and "bad" are two Strings
and sentimentVal() only takes in one String.


ACTIVITY 2: Sentiment Value and Star Ratings

1+2: terminal returned 4.109999999999999.

4.
It iterates through the file, searching for spaces, and once that is found, totalSentiments will classify everything prior to the space as a word. and find the
sentimentVal. Then, everything from prior to the space would be removed, and the function will continue iterating through the rest, summing up all the
sentimentVals. This will continue until nothing is left and the total is returne.

5a. Not particularly because the setiments have to be really high in order to return a good rating.
5b. We can multiply totalSentiment by some factor or we can check the rating against the input word count.

6. he should reversed the comparison sign around because in his current code, no matter if the totalSentiment is 0 or 14, it will always return 4.

ACTIVITY 3: Autogenerated Review

3. indexOf() returns the index of a character in a String. substring() returns
part of a String, beginning from the specified start index up to the specified
end index. These methods can be used to divide a string into two parts by finding
the index of the character you want to split at and creating two separate 
substrings. The first substring will have all the characters from the first character
up until the character at the specified index. The second substring will contain
the rest of the characters of the original string.

5. The difference between calling static methods as opposed to calling non-static methods is that for static methods, it 
can be called without creating an instance of Review. On the other hand, an instance of a class has to be created to access
the non-static method.

6. fakeReview can be modified by using randomPositiveAdj() or randomNegativeAdj() to create a (strictly) fake positive review
or a (strictly) fake negative review.

ACTIVITY 4: Create a Positive or Negative Review

1. You want to troll something you really dislike.
2. You want to support something you fervently like. 
3. Instead of a review that might be negative or positive, we can create a solely positive one as to avoid randomness.
5. Removes first index.
6. Not removing it might cause an exception where no sentimentVal is returned.
7. Yes, if every chance of negativity is removed and only positive adjectives are used.

ACTIVITY 5: 

Compilable and Runnable Program: Activity5.java
Project based off of Wordle

1. We chose to implement this program because it is a simple and fun minigame that
processes user input data (the word) and checks if each letter is in the
mystery word and if it is in the correct position.

2. The stages for completing the project are as follows: (1) brainstorm ideas,
(2) map out basic algorithm on KtS, (3) code individual parts (i.e. main(),
overloaded constructor for the game, play(), isIn(), and displayCheck()).

3. Header: public boolean isIn(String tempLetter) {}
The chosen parameter is a String, more specifically, the 1-length substring of
the word that the player guesses. We used this parameter to allow the method to
compare the letter with letters of the mystery word. We made the method
non-static because we wanted to call the instance variable _word within the
method.

4. 
~~~~~~~~~~~~~~~~~~~~~~~~~ Code Segment ~~~~~~~~~~~~~~~~~~~~~~~~~
if (tempLetter.compareTo(_word.substring(i, i + 1)) == 0) {
  _check[i] = "+";
  _letters.remove(_letters.indexOf(tempLetter));
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The methods of String class being called are compareTo() and substring(). We
use compareTo() to compare whether the two Strings (predetermined to be the
same length) are the same. The method returns an int value, which We convert to
a boolean expression with the boolean operator ==. We used substring() to take a
1-length "piece" of the String _word; it returns a String.

5.
~~~~~~~~~~~~~~~~~~~~~~~~~ Code Segment ~~~~~~~~~~~~~~~~~~~~~~~~~
if (isIn(tempLetter) && (_check[i].compareTo("+") != 0)) {
  _check[i] = "?";
  _letters.remove(_letters.indexOf(tempLetter));
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Another way to achieve the same result as the boolean expression attached to
the if statement is placing an if statement within another if statement because
the boolean operator used is &&.

~~~~~~~~~~~~~~~~~~~~~~~~~~ Equivalent ~~~~~~~~~~~~~~~~~~~~~~~~~~
if (isIn(tempLetter)) {
  if (_check[i].compareTo("+") != 0) {
    _check[i] = "?";
    _letters.remove(_letters.indexOf(tempLetter));
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


6.
~~~~~~~~~~~~~~~~~~~~~~~~~ Code Segment ~~~~~~~~~~~~~~~~~~~~~~~~~
for (int i = 0; i < 5; i ++) {
  _letters.add(_word.substring(i, i + 1));
  _check[i] = "-";
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We used a for-loop iteration to set the elements of AL _letters to the five
letters of _word and the all 5 elements of _check[] to "-".

~~~~~~~~~~~~~~~~~~~~~~~~~~ Equivalent ~~~~~~~~~~~~~~~~~~~~~~~~~~
int i = 0;
while (i < 5) {
  _letters.add(_word.substring(i, i + 1));
  _check[i] = "-";
  i ++;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
